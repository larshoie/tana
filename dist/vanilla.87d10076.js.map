{"version":3,"sources":["src/vanilla.js"],"names":["LLMHeroAnimation","options","_options$speed","_options$pauseDuratio","_options$autoplay","_classCallCheck","container","speed","pauseDuration","autoplay","children","Array","from","animationTimeouts","isAnimating","currentStep","isPaused","hasPassedMidpoint","animateSequence","bind","resumeSequence","handleMouseEnter","handleMouseLeave","init","_createClass","key","value","classList","add","forEach","child","style","opacity","transition","position","addEventListener","clearAnimationTimeouts","timeout","clearTimeout","_this","totalSteps","length","revealSteps","fadeOutSteps","pauseStep","tagName","toLowerCase","play","setTimeout","fadeOutIndex","pause","currentTime","nextTimeout","push","start","stop","destroy","removeEventListener","remove","window","_default","exports","default"],"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","file":"vanilla.87d10076.js","sourceRoot":"..","sourcesContent":["// // class LLMHeroAnimation {\n// //     /**\n// //      * Create a new LLM Hero Animation\n// //      * @param {Object} options - Configuration options\n// //      * @param {HTMLElement} options.container - The container element\n// //      * @param {number} [options.speed=1000] - Time per element (ms)\n// //      * @param {number} [options.pauseDuration=1000] - Pause time when all elements are visible (ms)\n// //      * @param {boolean} [options.autoplay=true] - Whether to start animation automatically\n// //      */\n// //     constructor(options) {\n// //         this.container = options.container;\n// //         this.speed = options.speed ?? 1000; // Time per element\n// //         this.pauseDuration = options.pauseDuration ?? 1000; // Pause duration when all elements are visible\n// //         this.autoplay = options.autoplay ?? true;\n\n// //         // Internal state tracking\n// //         this.children = Array.from(this.container.children);\n// //         this.animationTimeouts = [];\n// //         this.isAnimating = this.autoplay;\n\n// //         // Bind methods to maintain correct context\n// //         this.animateSequence = this.animateSequence.bind(this);\n// //         this.handleMouseEnter = this.handleMouseEnter.bind(this);\n// //         this.handleMouseLeave = this.handleMouseLeave.bind(this);\n\n// //         // Initial setup\n// //         this.init();\n// //     }\n\n// //     /**\n// //      * Initialize the animation\n// //      */\n// //     init() {\n// //         this.container.classList.add('llm-hero-animation');\n// //         this.children.forEach((child) => {\n// //             child.classList.add('llm-hero-item');\n// //             child.style.opacity = '0';\n// //             child.style.transition = 'opacity 0.3s ease-in-out';\n// //         });\n// //         this.container.style.position = 'relative';\n\n// //         this.container.addEventListener('mouseenter', this.handleMouseEnter);\n// //         this.container.addEventListener('mouseleave', this.handleMouseLeave);\n\n// //         if (this.autoplay) {\n// //             this.animateSequence();\n// //         }\n// //     }\n\n// //     /**\n// //      * Clear all existing animation timeouts\n// //      */\n// //     clearAnimationTimeouts() {\n// //         this.animationTimeouts.forEach(timeout => clearTimeout(timeout));\n// //         this.animationTimeouts = [];\n// //     }\n\n// //     /**\n// //      * Animate the sequence of revealing, pausing, and fading out\n// //      */\n// //     animateSequence() {\n// //         this.clearAnimationTimeouts();\n\n// //         this.children.forEach(child => {\n// //             child.style.opacity = '0';\n// //             if (child.tagName.toLowerCase() === 'video') {\n// //                 child.pause();\n// //                 child.currentTime = 0;\n// //             }\n// //         });\n\n// //         if (!this.isAnimating) return;\n\n// //         const revealDelay = this.speed;\n\n// //         // Reveal children sequentially\n// //         this.children.forEach((child, index) => {\n// //             const timeout = setTimeout(() => {\n// //                 if (this.isAnimating) {\n// //                     child.style.opacity = '1';\n// //                     if (child.tagName.toLowerCase() === 'video') {\n// //                         child.play();\n// //                     }\n// //                 }\n// //             }, index * revealDelay);\n// //             this.animationTimeouts.push(timeout);\n// //         });\n\n// //         // Pause when all elements are visible\n// //         const pauseStart = this.children.length * revealDelay;\n// //         const pauseTimeout = setTimeout(() => {\n// //             if (this.isAnimating) {\n// //                 // Fade-out children in reverse order after the pause\n// //                 this.fadeOutSequence(pauseStart);\n// //             }\n// //         }, pauseStart + this.pauseDuration);\n// //         this.animationTimeouts.push(pauseTimeout);\n// //     }\n\n// //     /**\n// //      * Fade-out children in reverse order\n// //      */\n// //     fadeOutSequence(startTime) {\n// //         const fadeOutDelay = this.speed;\n\n// //         this.children\n// //             .slice()\n// //             .reverse()\n// //             .forEach((child, index) => {\n// //                 const timeout = setTimeout(() => {\n// //                     if (this.isAnimating) {\n// //                         child.style.opacity = '0';\n// //                         if (child.tagName.toLowerCase() === 'video') {\n// //                             child.pause();\n// //                             child.currentTime = 0;\n// //                         }\n// //                     }\n// //                 }, startTime + index * fadeOutDelay);\n// //                 this.animationTimeouts.push(timeout);\n// //             });\n\n// //         // Restart the sequence after fade-out\n// //         const restartTime = startTime + this.children.length * fadeOutDelay;\n// //         const restartTimeout = setTimeout(() => {\n// //             if (this.isAnimating) {\n// //                 this.animateSequence();\n// //             }\n// //         }, restartTime);\n// //         this.animationTimeouts.push(restartTimeout);\n// //     }\n\n// //     /**\n// //      * Pause animation on mouse enter\n// //      */\n// //     handleMouseEnter() {\n// //         this.isAnimating = false;\n// //         this.clearAnimationTimeouts();\n// //         this.children.forEach(child => {\n// //             if (child.tagName.toLowerCase() === 'video') {\n// //                 child.pause();\n// //             }\n// //         });\n// //     }\n\n// //     /**\n// //      * Resume animation on mouse leave\n// //      */\n// //     handleMouseLeave() {\n// //         this.isAnimating = true;\n// //         this.animateSequence();\n// //     }\n\n// //     /**\n// //      * Manually start the animation\n// //      */\n// //     start() {\n// //         this.isAnimating = true;\n// //         this.animateSequence();\n// //     }\n\n// //     /**\n// //      * Manually stop the animation\n// //      */\n// //     stop() {\n// //         this.isAnimating = false;\n// //         this.clearAnimationTimeouts();\n// //         this.children.forEach(child => {\n// //             child.style.opacity = '0';\n// //             if (child.tagName.toLowerCase() === 'video') {\n// //                 child.pause();\n// //                 child.currentTime = 0;\n// //             }\n// //         });\n// //     }\n\n// //     /**\n// //      * Destroy the animation and clean up\n// //      */\n// //     destroy() {\n// //         this.container.removeEventListener('mouseenter', this.handleMouseEnter);\n// //         this.container.removeEventListener('mouseleave', this.handleMouseLeave);\n\n// //         this.clearAnimationTimeouts();\n\n// //         this.container.classList.remove('llm-hero-animation');\n// //         this.container.style.position = '';\n// //         this.children.forEach(child => {\n// //             child.classList.remove('llm-hero-item');\n// //             child.style.opacity = '';\n// //             child.style.transition = '';\n// //         });\n// //     }\n// // }\n\n// // // Expose to global scope if not using a module system\n// // if (typeof window !== 'undefined') {\n// //     window.LLMHeroAnimation = LLMHeroAnimation;\n// // }\n\n// // export default LLMHeroAnimation;\n\n\n\n\n\n// class LLMHeroAnimation {\n//     /**\n//      * Create a new LLM Hero Animation\n//      * @param {Object} options - Configuration options\n//      * @param {HTMLElement} options.container - The container element\n//      * @param {number} [options.speed=1000] - Time per element (ms)\n//      * @param {number} [options.pauseDuration=1000] - Pause time when all elements are visible (ms)\n//      * @param {boolean} [options.autoplay=true] - Whether to start animation automatically\n//      */\n//     constructor(options) {\n//         this.container = options.container;\n//         this.speed = options.speed ?? 1000; // Time per element\n//         this.pauseDuration = options.pauseDuration ?? 1000; // Pause duration when all elements are visible\n//         this.autoplay = options.autoplay ?? true;\n\n//         // Internal state tracking\n//         this.children = Array.from(this.container.children);\n//         this.animationTimeouts = [];\n//         this.isAnimating = this.autoplay;\n//         this.currentStep = 0; // Track the current position in the sequence\n//         this.isPaused = false; // Track whether the animation is paused\n\n//         // Bind methods to maintain correct context\n//         this.animateSequence = this.animateSequence.bind(this);\n//         this.resumeSequence = this.resumeSequence.bind(this);\n//         this.handleMouseEnter = this.handleMouseEnter.bind(this);\n//         this.handleMouseLeave = this.handleMouseLeave.bind(this);\n\n//         // Initial setup\n//         this.init();\n//     }\n\n//     /**\n//      * Initialize the animation\n//      */\n//     init() {\n//         this.container.classList.add('llm-hero-animation');\n//         this.children.forEach((child) => {\n//             child.classList.add('llm-hero-item');\n//             child.style.opacity = '0';\n//             child.style.transition = 'opacity 0.3s ease-in-out';\n//         });\n//         this.container.style.position = 'relative';\n\n//         this.container.addEventListener('mouseenter', this.handleMouseEnter);\n//         this.container.addEventListener('mouseleave', this.handleMouseLeave);\n\n//         if (this.autoplay) {\n//             this.animateSequence();\n//         }\n//     }\n\n//     /**\n//      * Clear all existing animation timeouts\n//      */\n//     clearAnimationTimeouts() {\n//         this.animationTimeouts.forEach(timeout => clearTimeout(timeout));\n//         this.animationTimeouts = [];\n//     }\n\n//     /**\n//      * Animate the sequence of revealing, pausing, and fading out\n//      */\n//     animateSequence() {\n//         this.clearAnimationTimeouts();\n\n//         if (!this.isAnimating || this.isPaused) return;\n\n//         const totalSteps = this.children.length * 2 + 1; // Reveal + Pause + Fade-out\n//         const revealSteps = this.children.length;\n//         const fadeOutSteps = this.children.length;\n//         const pauseStep = revealSteps; // The step when all elements are visible\n\n//         if (this.currentStep < revealSteps) {\n//             // Reveal sequence\n//             const child = this.children[this.currentStep];\n//             if (child) {\n//                 child.style.opacity = '1';\n//                 if (child.tagName.toLowerCase() === 'video') {\n//                     child.play();\n//                 }\n//             }\n//         } else if (this.currentStep === pauseStep) {\n//             // Pause when all elements are visible\n//             setTimeout(() => {\n//                 this.currentStep++;\n//                 this.animateSequence();\n//             }, this.pauseDuration);\n//             return;\n//         } else if (this.currentStep > pauseStep && this.currentStep < totalSteps) {\n//             // Fade-out sequence\n//             const fadeOutIndex = this.currentStep - pauseStep - 1;\n//             const child = this.children[this.children.length - 1 - fadeOutIndex];\n//             if (child) {\n//                 child.style.opacity = '0';\n//                 if (child.tagName.toLowerCase() === 'video') {\n//                     child.pause();\n//                     child.currentTime = 0;\n//                 }\n//             }\n//         } else {\n//             // Restart sequence\n//             this.currentStep = 0;\n//             this.animateSequence();\n//             return;\n//         }\n\n//         // Move to the next step\n//         this.currentStep++;\n//         const nextTimeout = setTimeout(() => {\n//             this.animateSequence();\n//         }, this.speed);\n//         this.animationTimeouts.push(nextTimeout);\n//     }\n\n//     /**\n//      * Resume animation from the current step\n//      */\n//     resumeSequence() {\n//         this.isPaused = false;\n//         this.animateSequence();\n//     }\n\n//     /**\n//      * Pause animation on mouse enter or manual stop\n//      */\n//     handleMouseEnter() {\n//         this.isPaused = true;\n//         this.clearAnimationTimeouts();\n//     }\n\n//     /**\n//      * Resume animation on mouse leave or manual start\n//      */\n//     handleMouseLeave() {\n//         this.resumeSequence();\n//     }\n\n//     /**\n//      * Manually start the animation\n//      */\n//     start() {\n//         this.isAnimating = true;\n//         this.resumeSequence();\n//     }\n\n//     /**\n//      * Manually stop the animation\n//      */\n//     stop() {\n//         this.isAnimating = false;\n//         this.isPaused = true;\n//         this.clearAnimationTimeouts();\n//     }\n\n//     /**\n//      * Destroy the animation and clean up\n//      */\n//     destroy() {\n//         this.container.removeEventListener('mouseenter', this.handleMouseEnter);\n//         this.container.removeEventListener('mouseleave', this.handleMouseLeave);\n\n//         this.clearAnimationTimeouts();\n\n//         this.container.classList.remove('llm-hero-animation');\n//         this.container.style.position = '';\n//         this.children.forEach(child => {\n//             child.classList.remove('llm-hero-item');\n//             child.style.opacity = '';\n//             child.style.transition = '';\n//         });\n//     }\n// }\n\n// // Expose to global scope if not using a module system\n// if (typeof window !== 'undefined') {\n//     window.LLMHeroAnimation = LLMHeroAnimation;\n// }\n\n// export default LLMHeroAnimation;\n\n\n\n// class LLMHeroAnimation {\n//     /**\n//      * Create a new LLM Hero Animation\n//      * @param {Object} options - Configuration options\n//      * @param {HTMLElement} options.container - The container element\n//      * @param {number} [options.speed=1000] - Time per element (ms)\n//      * @param {number} [options.pauseDuration=1000] - Pause time when all elements are visible (ms)\n//      * @param {boolean} [options.autoplay=true] - Whether to start animation automatically\n//      */\n//     constructor(options) {\n//         this.container = options.container;\n//         this.speed = options.speed ?? 1000; // Time per element\n//         this.pauseDuration = options.pauseDuration ?? 1000; // Pause duration when all elements are visible\n//         this.autoplay = options.autoplay ?? true;\n\n//         // Internal state tracking\n//         this.children = Array.from(this.container.children);\n//         this.animationTimeouts = [];\n//         this.isAnimating = this.autoplay;\n//         this.currentStep = 0; // Track the current position in the sequence\n//         this.isPaused = false; // Track whether the animation is paused\n//         this.hasReachedMidpoint = false; // Ensures animation reaches at least 50%\n\n//         // Bind methods to maintain correct context\n//         this.animateSequence = this.animateSequence.bind(this);\n//         this.resumeSequence = this.resumeSequence.bind(this);\n//         this.handleMouseEnter = this.handleMouseEnter.bind(this);\n//         this.handleMouseLeave = this.handleMouseLeave.bind(this);\n\n//         // Initial setup\n//         this.init();\n//     }\n\n//     /**\n//      * Initialize the animation\n//      */\n//     init() {\n//         this.container.classList.add('llm-hero-animation');\n//         this.children.forEach((child) => {\n//             child.classList.add('llm-hero-item');\n//             child.style.opacity = '0';\n//             child.style.transition = 'opacity 0.3s ease-in-out';\n//         });\n//         this.container.style.position = 'relative';\n\n//         this.container.addEventListener('mouseenter', this.handleMouseEnter);\n//         this.container.addEventListener('mouseleave', this.handleMouseLeave);\n\n//         if (this.autoplay) {\n//             this.animateSequence();\n//         }\n//     }\n\n//     /**\n//      * Clear all existing animation timeouts\n//      */\n//     clearAnimationTimeouts() {\n//         this.animationTimeouts.forEach(timeout => clearTimeout(timeout));\n//         this.animationTimeouts = [];\n//     }\n\n//     /**\n//      * Animate the sequence of revealing, pausing, and fading out\n//      */\n//     animateSequence() {\n//         this.clearAnimationTimeouts();\n\n//         if (!this.isAnimating || this.isPaused) return;\n\n//         const totalSteps = this.children.length * 2 + 1; // Reveal + Pause + Fade-out\n//         const revealSteps = this.children.length;\n//         const fadeOutSteps = this.children.length;\n//         const pauseStep = revealSteps; // The step when all elements are visible\n\n//         if (this.currentStep < revealSteps) {\n//             // Reveal sequence\n//             const child = this.children[this.currentStep];\n//             if (child) {\n//                 child.style.opacity = '1';\n//                 if (child.tagName.toLowerCase() === 'video') {\n//                     child.play();\n//                 }\n//             }\n//         } else if (this.currentStep === pauseStep) {\n//             // Pause when all elements are visible\n//             this.hasReachedMidpoint = true; // Mark that the animation has reached 50%\n//             setTimeout(() => {\n//                 this.currentStep++;\n//                 this.animateSequence();\n//             }, this.pauseDuration);\n//             return;\n//         } else if (this.currentStep > pauseStep && this.currentStep < totalSteps) {\n//             // Fade-out sequence\n//             const fadeOutIndex = this.currentStep - pauseStep - 1;\n//             const child = this.children[this.children.length - 1 - fadeOutIndex];\n//             if (child) {\n//                 child.style.opacity = '0';\n//                 if (child.tagName.toLowerCase() === 'video') {\n//                     child.pause();\n//                     child.currentTime = 0;\n//                 }\n//             }\n//         } else {\n//             // Restart sequence\n//             this.currentStep = 0;\n//             this.animateSequence();\n//             return;\n//         }\n\n//         // Move to the next step\n//         this.currentStep++;\n//         const nextTimeout = setTimeout(() => {\n//             this.animateSequence();\n//         }, this.speed);\n//         this.animationTimeouts.push(nextTimeout);\n//     }\n\n//     /**\n//      * Resume animation from the current step\n//      */\n//     resumeSequence() {\n//         this.isPaused = false;\n//         this.animateSequence();\n//     }\n\n//     /**\n//      * Pause animation on mouse enter or manual stop\n//      */\n//     handleMouseEnter() {\n//         if (this.hasReachedMidpoint) {\n//             // Only allow pausing if the animation has reached at least 50%\n//             this.isPaused = true;\n//             this.clearAnimationTimeouts();\n//         }\n//     }\n\n//     /**\n//      * Resume animation on mouse leave or manual start\n//      */\n//     handleMouseLeave() {\n//         if (this.hasReachedMidpoint) {\n//             this.resumeSequence();\n//         }\n//     }\n\n//     /**\n//      * Manually start the animation\n//      */\n//     start() {\n//         this.isAnimating = true;\n//         this.resumeSequence();\n//     }\n\n//     /**\n//      * Manually stop the animation\n//      */\n//     stop() {\n//         this.isAnimating = false;\n//         this.isPaused = true;\n//         this.clearAnimationTimeouts();\n//     }\n\n//     /**\n//      * Destroy the animation and clean up\n//      */\n//     destroy() {\n//         this.container.removeEventListener('mouseenter', this.handleMouseEnter);\n//         this.container.removeEventListener('mouseleave', this.handleMouseLeave);\n\n//         this.clearAnimationTimeouts();\n\n//         this.container.classList.remove('llm-hero-animation');\n//         this.container.style.position = '';\n//         this.children.forEach(child => {\n//             child.classList.remove('llm-hero-item');\n//             child.style.opacity = '';\n//             child.style.transition = '';\n//         });\n//     }\n// }\n\n// // Expose to global scope if not using a module system\n// if (typeof window !== 'undefined') {\n//     window.LLMHeroAnimation = LLMHeroAnimation;\n// }\n\n// export default LLMHeroAnimation;\n\n\n\nclass LLMHeroAnimation {\n    /**\n     * Create a new LLM Hero Animation\n     * @param {Object} options - Configuration options\n     * @param {HTMLElement} options.container - The container element\n     * @param {number} [options.speed=1000] - Time per element (ms)\n     * @param {number} [options.pauseDuration=1000] - Pause time when all elements are visible (ms)\n     * @param {boolean} [options.autoplay=true] - Whether to start animation automatically\n     */\n    constructor(options) {\n        this.container = options.container;\n        this.speed = options.speed ?? 1000; // Time per element\n        this.pauseDuration = options.pauseDuration ?? 1000; // Pause duration when all elements are visible\n        this.autoplay = options.autoplay ?? true;\n\n        // Internal state tracking\n        this.children = Array.from(this.container.children);\n        this.animationTimeouts = [];\n        this.isAnimating = this.autoplay;\n        this.currentStep = 0; // Track the current position in the sequence\n        this.isPaused = false; // Track whether the animation is paused\n        this.hasPassedMidpoint = false; // Ensures pausing is only allowed past 50%\n\n        // Bind methods to maintain correct context\n        this.animateSequence = this.animateSequence.bind(this);\n        this.resumeSequence = this.resumeSequence.bind(this);\n        this.handleMouseEnter = this.handleMouseEnter.bind(this);\n        this.handleMouseLeave = this.handleMouseLeave.bind(this);\n\n        // Initial setup\n        this.init();\n    }\n\n    /**\n     * Initialize the animation\n     */\n    init() {\n        this.container.classList.add('llm-hero-animation');\n        this.children.forEach((child) => {\n            child.classList.add('llm-hero-item');\n            child.style.opacity = '0';\n            child.style.transition = 'opacity 0.3s ease-in-out';\n        });\n        this.container.style.position = 'relative';\n\n        this.container.addEventListener('mouseenter', this.handleMouseEnter);\n        this.container.addEventListener('mouseleave', this.handleMouseLeave);\n\n        if (this.autoplay) {\n            this.animateSequence();\n        }\n    }\n\n    /**\n     * Clear all existing animation timeouts\n     */\n    clearAnimationTimeouts() {\n        this.animationTimeouts.forEach(timeout => clearTimeout(timeout));\n        this.animationTimeouts = [];\n    }\n\n    /**\n     * Animate the sequence of revealing, pausing, and fading out\n     */\n    animateSequence() {\n        this.clearAnimationTimeouts();\n\n        if (!this.isAnimating || this.isPaused) return;\n\n        const totalSteps = this.children.length * 2 + 1; // Reveal + Pause + Fade-out\n        const revealSteps = this.children.length;\n        const fadeOutSteps = this.children.length;\n        const pauseStep = revealSteps; // The step when all elements are visible\n\n        if (this.currentStep < revealSteps) {\n            // Reveal sequence\n            const child = this.children[this.currentStep];\n            if (child) {\n                child.style.opacity = '1';\n                if (child.tagName.toLowerCase() === 'video') {\n                    child.play();\n                }\n            }\n        } else if (this.currentStep === pauseStep) {\n            // Pause when all elements are visible\n            setTimeout(() => {\n                this.currentStep++;\n                this.animateSequence();\n            }, this.pauseDuration);\n            return;\n        } else if (this.currentStep > pauseStep && this.currentStep < totalSteps) {\n            // Mark that animation has passed the midpoint\n            this.hasPassedMidpoint = true;\n\n            // Fade-out sequence\n            const fadeOutIndex = this.currentStep - pauseStep - 1;\n            const child = this.children[this.children.length - 1 - fadeOutIndex];\n            if (child) {\n                child.style.opacity = '0';\n                if (child.tagName.toLowerCase() === 'video') {\n                    child.pause();\n                    child.currentTime = 0;\n                }\n            }\n        } else {\n            // Restart sequence\n            this.currentStep = 0;\n            this.hasPassedMidpoint = false; // Reset midpoint flag\n            this.animateSequence();\n            return;\n        }\n\n        // Move to the next step\n        this.currentStep++;\n        const nextTimeout = setTimeout(() => {\n            this.animateSequence();\n        }, this.speed);\n        this.animationTimeouts.push(nextTimeout);\n    }\n\n    /**\n     * Resume animation from the current step\n     */\n    resumeSequence() {\n        this.isPaused = false;\n        this.animateSequence();\n    }\n\n    /**\n     * Pause animation on mouse enter or manual stop\n     */\n    handleMouseEnter() {\n        if (this.hasPassedMidpoint) {\n            // Only allow pausing if the animation has passed the midpoint (start of fade-out)\n            this.isPaused = true;\n            this.clearAnimationTimeouts();\n        }\n    }\n\n    /**\n     * Resume animation on mouse leave or manual start\n     */\n    handleMouseLeave() {\n        if (this.hasPassedMidpoint) {\n            this.resumeSequence();\n        }\n    }\n\n    /**\n     * Manually start the animation\n     */\n    start() {\n        this.isAnimating = true;\n        this.resumeSequence();\n    }\n\n    /**\n     * Manually stop the animation\n     */\n    stop() {\n        this.isAnimating = false;\n        this.isPaused = true;\n        this.clearAnimationTimeouts();\n    }\n\n    /**\n     * Destroy the animation and clean up\n     */\n    destroy() {\n        this.container.removeEventListener('mouseenter', this.handleMouseEnter);\n        this.container.removeEventListener('mouseleave', this.handleMouseLeave);\n\n        this.clearAnimationTimeouts();\n\n        this.container.classList.remove('llm-hero-animation');\n        this.container.style.position = '';\n        this.children.forEach(child => {\n            child.classList.remove('llm-hero-item');\n            child.style.opacity = '';\n            child.style.transition = '';\n        });\n    }\n}\n\n// Expose to global scope if not using a module system\nif (typeof window !== 'undefined') {\n    window.LLMHeroAnimation = LLMHeroAnimation;\n}\n\nexport default LLMHeroAnimation;"]}